management:
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
    redis:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

spring:
  profiles:
    default: dev
  application:
    name: gateway
  cloud:
    gateway:
      default-filters:
        - GlobalFilter
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedToken: 1
        - name: Retry
          args:
            retries: 3
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
        - name: CircuitBreaker
          args:
            name: CircuitBreaker
            fallbackUri: forward:/fallback

      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: 
              - "http://localhost:3000"
              - "https://baeker.vercel.app"
            allow-credentials: true
            allowedHeaders: "*"
            allowedMethods:
              - PUT
              - GET
              - POST
              - DELETE
              - OPTIONS

      routes:
        - id: rule
          uri: lb://rule #http://rule
          predicates:
            - Path=/api/rule/**

        - id: member-service
          uri: lb://member-service #http://member
          predicates:
            - Path=/api/member/**, /oauth2/authorization/**, /login/**, /api/search/**

        - id: study
          uri: lb://study #http://study
          predicates:
            - Path=/api/studyrule/**,/api/study/**,/api/my-study/**

        - id: solved
          uri: lb://solved #http://solved
          predicates:
            - Path=/api/solved/**
#        - id: keycloak
#          uri: http://${custom.server}:8080
#          predicates:
#            - Path=/auth/**
#          filters:
#            - RewritePath=/auth/(?<segment>.*), /$\{segment}

server:
  ssl:
    enabled: true
    key-store-type: PKCS12
    key-store-password: ENC(ebfNAD4t/e7tlS39HOlQyAEP+mqX4uAL)
    key-store: file:/keystore.p12
  port: 9000

custom:
  front: "localhost:3000" #TODO: front 서버 주소
  server: 10.22.131.215 # 유레카 서버
  jwt:
    secret-key: ENC(+GbV3Ykx/t5XFlaFHBZnXTzsSf9b3YChS2cVPTvCgwQmevtbB1Hfw91VMC/fTizxVssJvYiAMeQICsuoSrH5zNLh/jxJsXq/)

jasypt:
  encryptor:
    bean: jasyptStringEncryptor

resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        sliding-window-size: 10  # 서킷브레이커가 마지막 10개 요청을 고려
        permitted-number-of-calls-in-half-open-state: 5 # 반절
        failure-rate-threshold: 50 # 그중 50%가 실패하면 open
        wait-duration-in-open-state: 10000 # 10초동안 open
        register-health-indicator: true
  timelimiter:
    instances:
      myCircuitBreaker:
        timeout-duration: 5s # 요청 시간 제한

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://34.64.137.210:8761/eureka/



logging:
  level:
    org.springframework.security: TRACE
    org.springframework.security.jackson2: INFO

solved:
  ip: 54.180.90.94

