management:
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
    redis:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

spring:
  profiles:
    default:
  application:
    name: gateway
  cloud:
    gateway:
      default-filters:
        - GlobalFilter
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
#        - AuthenticationFilter
#        - SaveSession
#        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedToken: 1
        - name: Retry
          args:
            retries: 3
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms

      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: 'http://localhost:3000'
            allow-credentials: true
            allowedHeaders: "*"
            allowedMethods:
              - PUT
              - GET
              - POST
              - DELETE
              - OPTIONS

      routes:
        - id: rule-service
          uri: lb://rule-service
          predicates:
            - Path=/api/rule/**
          filters:
            - name: CircuitBreaker
              args:
                name: ruleCircuitBreaker
                fallbackUri: forward:/fallback-rule

        - id: baeker-member
          uri: lb://baeker-member
          predicates:
            - Path=/api/member/**

        - id: baeker-study
          uri: lb://baeker-study
          predicates:
            - Path=/api/studyrule/**,/api/study/**,/api/my-study/**

        - id: solved
          uri: lb://solved
          predicates:
            - Path=/api/solved/**
        - id: keycloak
          uri: http://${custom.server}:8080
          predicates:
            - Path=/auth/**
          filters:
            - RewritePath=/auth/(?<segment>.*), /$\{segment}

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: https://kauth.kakao.com/.well-known/jwks.json
      client:
        registration:
          kakao:
            clientId: ENC(0HCojoXJI2AP2Y71MdgjJ8uH7iJLBtyBEOtBkTrteQMu46fZXaJRcikg1KQLA4US)
            client-secret: ENC(WJG683WsZHVZ73bPfEGNAUsfDzoHR8ulyfHL0mF8BxMhHITZXyoXm3RCS83VNKFM)
            scope: account_email, profile_nickname, profile_image, openid
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: http://127.0.0.1:9000/login/oauth2/code/kakao
            client-authentication-method: POST

        provider:
          kakao:
            jwk-set-uri: https://kauth.kakao.com/.well-known/jwks.json
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v1/oidc/userinfo
#            user-name-attribute: openid
            issuer-uri: https://kauth.kakao.com

server:
  port: 9000


eureka:
  instance:
    preferIpAddress: true
    instance-id: ${custom.server}:${server.port}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${custom.server}:8761/eureka/

custom:
  front: "localhost:3000" #TODO: front 서버 주소
  server: localhost

jasypt:
  encryptor:
    bean: jasyptStringEncryptor

resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        sliding-window-size: 10  # 서킷브레이커가 마지막 10개 요청을 고려
        permitted-number-of-calls-in-half-open-state: 5 # 반절
        failure-rate-threshold: 50 # 그중 50%가 실패하면 open
        wait-duration-in-open-state: 10000 # 10초동안 open
        register-health-indicator: true
  timelimiter:
    instances:
      myCircuitBreaker:
        timeout-duration: 3s # 요청 시간 제한


token:
  secret: userToken


logging:
  level:
    org.springframework.security: TRACE
    org.springframework.security.jackson2: INFO

