custom:
  server: gateway
  front: "localhost:3000"

  route:
    member: localhost:8081
    study: localhost:8082
    solved: localhost:8084
    chat: localhost:8085
    community: localhost:8086

  jwt:
    secret-key: ENC(+GbV3Ykx/t5XFlaFHBZnXTzsSf9b3YChS2cVPTvCgwQmevtbB1Hfw91VMC/fTizxVssJvYiAMeQICsuoSrH5zNLh/jxJsXq/)

server:
  port: 9000


spring:
  profiles:
    default:
  application:
    name: ${custom.server}
  cloud:
    gateway:
      default-filters:
        - GlobalFilter
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedToken: 1
        - name: Retry
          args:
            retries: 3
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
        - name: CircuitBreaker
          args:
            name: CircuitBreaker
            fallbackUri: forward:/fallback

      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: 
              - "http://localhost:3000"
              - "https://baeker.vercel.app"
            allow-credentials: true
            allowedHeaders: "*"
            allowedMethods:
              - PUT
              - GET
              - POST
              - DELETE
              - OPTIONS

      routes:
        - id: member
          uri: http://${custom.route.member}
          predicates:
            - Path=/api/member/**, /api/search/**

        - id: member_login
          uri: http://${custom.route.member}
          predicates:
            - Path=/oauth2/authorization/**, /login/**

        - id: member_public
          uri: http://${custom.route.member}
          predicates:
            - Path=/pub/web/member/**, /pub/api/member/**

        - id: member_user
          uri: http://${custom.route.member}
          filters: JwtValidFilter
          predicates:
            - Path=/usr/web/member/**, /usr/api/member/**


        - id: study
          uri: http://${custom.route.study}
          predicates:
            - Path=/api/studyrule/**,/api/study/**,/api/my-study/**

        - id: study_public
          uri: http://${custom.route.study}
          predicates:
            - Path=/pub/api/studyrule/**, /pub/api/study/**, /pub/api/my-study/**, /pub/web/studyrule/**, /pub/web/study/**, /pub/web/my-study/**

        - id: study_user
          uri: http://${custom.route.study}
          filters: JwtValidFilter
          predicates:
            - Path=/usr/api/studyrule/**, /usr/api/study/**, /usr/api/my-study/**, /usr/web/studyrule/**, /usr/web/study/**, /usr/web/my-study/**


        - id: solved
          uri: http://${custom.route.solved}
          predicates:
            - Path=/api/studyrule/**,/api/study/**,/api/my-study/**


        - id: chat_public
          uri: http://${custom.route.chat}
          predicates:
            - Path=/pub/web/chat/**, /pub/api/chat/**

        - id: chat_user
          uri: http://${custom.route.chat}
          filters: JwtValidFilter
          predicates:
            - Path=/usr/web/chat/**, /usr/api/chat/**


        - id: community_public
          uri: http://${custom.route.community}
          predicates:
            - Path=/pub/web/community/**, /pub/api/community/**

        - id: community_user
          uri: http://${custom.route.community}
          filters: JwtValidFilter
          predicates:
            - Path=/usr/web/community/**, /usr/api/community/**


#        - id: keycloak
#          uri: http://${custom.server}:8080
#          predicates:
#            - Path=/auth/**
#          filters:
#            - RewritePath=/auth/(?<segment>.*), /$\{segment}

jasypt:
  encryptor:
    bean: jasyptStringEncryptor

resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        sliding-window-size: 10  # 서킷브레이커가 마지막 10개 요청을 고려
        permitted-number-of-calls-in-half-open-state: 5 # 반절
        failure-rate-threshold: 50 # 그중 50%가 실패하면 open
        wait-duration-in-open-state: 10000 # 10초동안 open
        register-health-indicator: true
  timelimiter:
    instances:
      myCircuitBreaker:
        timeout-duration: 5s # 요청 시간 제한


logging:
  level:
    org.springframework.security: TRACE
    org.springframework.security.jackson2: INFO

management:
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
    redis:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always